buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'forge'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.lootgames.version}"
group = "eu.usrv" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LootGames"

minecraft {
    version = "${config.forge.version}-${config.minecraft.version}"
    runDir = "eclipse"

    replaceIn "src/main/java/eu/usrv/lootgames/LootGames.java"
    def versionArray = project.version.tokenize('-')
    replace "GRADLETOKEN_VERSION", versionArray[1]

    mappings = "stable_12"
}

processResources {
    def cleanVersion = ""
    def versionArray = project.version.tokenize('-')
    cleanVersion = versionArray[1]

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", cleanVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': cleanVersion, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'lootgames_at.cfg'
    }
}

task signJar(dependsOn: 'reobf') {
    doLast {
        ant.signjar(
                destDir: jar.destinationDir,
                jar: jar.getArchivePath(),
                alias: findProperty('keyStoreAlias') ?: '',
                keystore: findProperty('keyStore') ?: '',
                storepass: findProperty('keyStorePass') ?: '',
                digestalg: findProperty('signDigestAlg') ?: '',
                tsaurl: findProperty('signTSAurl') ?: '',
                verbose: true
        )
    }
}